package com.rideaustin.rest;

import java.util.List;

import javax.annotation.security.RolesAllowed;
import javax.inject.Inject;
import javax.validation.Valid;
import javax.validation.constraints.Pattern;

import org.apache.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rideaustin.RiderEndpoint;
import com.rideaustin.assemblers.RiderCardDtoAssembler;
import com.rideaustin.model.enums.AvatarType;
import com.rideaustin.rest.exception.BadRequestException;
import com.rideaustin.rest.exception.RideAustinException;
import com.rideaustin.rest.model.RiderCardDto;
import com.rideaustin.service.RiderCardService;
import com.rideaustin.service.model.UpdateCardDto;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import lombok.RequiredArgsConstructor;

@Validated
@RestController
@RequestMapping("/rest/riders")
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class Cards {

  private final RiderCardService riderCardService;
  private final RiderCardDtoAssembler assembler;

  @RiderEndpoint
  @ApiOperation("List rider's cards")
  @RolesAllowed(AvatarType.ROLE_RIDER)
  @GetMapping(value = "/{riderId}/cards", produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiResponses({
    @ApiResponse(code = HttpStatus.SC_OK, message = "OK"),
    @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = "User is not allowed to list rider's cards"),
    @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = "Rider is not found"),
    @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = "Error while communicating with Stripe")
  })
  public List<RiderCardDto> listCards(@ApiParam(value = "Rider ID", example = "1") @PathVariable long riderId) throws RideAustinException {
    return assembler.toDto(riderCardService.listRiderCards(riderId));
  }

  @RiderEndpoint
  @ApiOperation("Add new card")
  @RolesAllowed(AvatarType.ROLE_RIDER)
  @PostMapping(value = "/{riderId}/cards", produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiResponses({
    @ApiResponse(code = HttpStatus.SC_OK, message = "OK"),
    @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = "User is not allowed to list rider's cards"),
    @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = "Rider is not found"),
    @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = "Error while communicating with Stripe")
  })
  public RiderCardDto addCard(
    @ApiParam(value = "Rider ID", example = "1") @PathVariable long riderId,
    @ApiParam("Card token generated by Stripe SDK") @RequestParam(value = "token") String cardToken
  )
    throws RideAustinException {
    return assembler.toDto(riderCardService.addRiderCard(riderId, cardToken));
  }

  @RiderEndpoint
  @ApiOperation("Update card details")
  @RolesAllowed(AvatarType.ROLE_RIDER)
  @PutMapping("/{riderId}/cards/{cardId}")
  @ApiResponses({
    @ApiResponse(code = HttpStatus.SC_OK, message = "OK"),
    @ApiResponse(code = HttpStatus.SC_BAD_REQUEST, message = "Expiration month or year is invalid"),
    @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = "User is not allowed to update rider's card"),
    @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = "Rider is not found"),
    @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = "Error while communicating with Stripe")
  })
  public void updateCard(
    @ApiParam(value = "Rider ID", example = "1") @PathVariable long riderId,
    @ApiParam(value = "Card ID", example = "1") @PathVariable long cardId,
    @ApiParam(value = "Set the card as primary source", required = true) @RequestParam boolean primary,
    @ApiParam("Expiration month") @RequestParam(required = false) @Valid @Pattern(regexp = "^(0?[1-9])|(1[0-2])$", message = "Month should be a 2-digit number") String expMonth,
    @ApiParam("Expiration year") @RequestParam(required = false) @Valid @Pattern(regexp = "^2[0-9]{3}$", message = "Year should be a 4-digit number") String expYear)
    throws RideAustinException {
    if (expMonth == null && expYear != null) {
      throw new BadRequestException("Expiration month is required");
    } else if (expMonth != null && expYear == null) {
      throw new BadRequestException("Expiration year is required");
    }
    UpdateCardDto updateCardDto = new UpdateCardDto(cardId, primary, expMonth, expYear);
    riderCardService.updateRiderCard(riderId, updateCardDto);
  }

  @RiderEndpoint
  @RolesAllowed(AvatarType.ROLE_RIDER)
  @ApiOperation("Delete a card")
  @DeleteMapping("/{riderId}/cards/{cardId}")
  @ApiResponses({
    @ApiResponse(code = HttpStatus.SC_OK, message = "OK"),
    @ApiResponse(code = HttpStatus.SC_BAD_REQUEST, message = "User can't delete primary card"),
    @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = "User is not allowed to delete rider's card"),
    @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = "Rider is not found"),
    @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = "Error while communicating with Stripe")
  })
  public void deleteCard(
    @ApiParam(value = "Rider ID", example = "1") @PathVariable long riderId,
    @ApiParam(value = "Card ID", example = "1") @PathVariable long cardId
  ) throws RideAustinException {
    riderCardService.deleteRiderCard(riderId, cardId);
  }

}
